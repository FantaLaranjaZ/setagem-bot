import discord
from discord.ext import commands
from discord.ui import Button, View, Modal, TextInput
import os  # Para acessar os secrets

# Configurações de intents
intents = discord.Intents.default()
intents.members = True  
bot = commands.Bot(command_prefix="!", intents=intents)

# IDs de canais e cargos
PEDIR_SET_CHANNEL_ID_1 = 1287192645327917128  
MEMBER_ROLE_1 = 1286471269126115392  
MEMBER_ROLE_2 = 1286471269126115390  

PEDIR_SET_CHANNEL_ID_2 = 1285815612907458570  
COHAB_ROLE_ID = 1237907323503120494  
NOVATO_ROLE_ID = 1254606365280698378  

class AccessModal(Modal):
    def __init__(self, guild_id):
        super().__init__(title="Liberar Acesso")
        self.guild_id = guild_id  
        self.name_input = TextInput(label="Nome", placeholder="Digite seu nome", required=True)
        self.id_input = TextInput(label="ID", placeholder="Digite seu ID", required=True)
        self.add_item(self.name_input)
        self.add_item(self.id_input)

    async def on_submit(self, interaction: discord.Interaction):
        member = interaction.user  
        nome = self.name_input.value  
        id_number = self.id_input.value  

        # Definindo novo apelido baseado no guild_id
        if self.guild_id == 1282761075376525364:  # Galaxy  
            novo_apelido = f"[MEB] {nome} | {id_number}"
        elif self.guild_id == 1254866649329303622:  # Servidor da cohab
            novo_apelido = f"[N] {nome} | {id_number}"

        try:
            await member.edit(nick=novo_apelido)
            await interaction.response.send_message(f"Seu apelido foi alterado para: {novo_apelido}", ephemeral=True)

            # Adicionar cargos conforme o servidor
            if self.guild_id == 1282761075376525364:  # Primeiro servidor
                role_1 = member.guild.get_role(MEMBER_ROLE_1)
                role_2 = member.guild.get_role(MEMBER_ROLE_2)
                if role_1 and role_2:
                    await member.add_roles(role_1, role_2)

            elif self.guild_id == 1254866649329303622:  # Servidor da cohab
                role_cohab = member.guild.get_role(COHAB_ROLE_ID)
                role_novato = member.guild.get_role(NOVATO_ROLE_ID)
                if role_cohab and role_novato:
                    await member.add_roles(role_cohab, role_novato)

        except discord.Forbidden:
            await interaction.followup.send("Não tenho permissão para alterar seu apelido ou adicionar cargos.", ephemeral=True)

class AccessButtonView(View):
    def __init__(self, guild_id):
        super().__init__(timeout=None)
        self.guild_id = guild_id  
        self.add_item(Button(label="Liberar Acesso", style=discord.ButtonStyle.green, custom_id=f"liberar_acesso_{guild_id}"))

    @discord.ui.button(label="Liberar Acesso", style=discord.ButtonStyle.green)
    async def liberar_acesso_button(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(AccessModal(self.guild_id))

@bot.event
async def on_ready():
    # Enviar o botão no primeiro canal
    channel_1 = bot.get_channel(PEDIR_SET_CHANNEL_ID_1)
    if channel_1:
        view_1 = AccessButtonView(1282761075376525364)  
        await channel_1.send("Clique no botão abaixo para liberar seu acesso:", view=view_1)

    # Enviar o botão no segundo canal
    channel_2 = bot.get_channel(PEDIR_SET_CHANNEL_ID_2)
    if channel_2:
        view_2 = AccessButtonView(1254866649329303622)  
        await channel_2.send("Clique no botão abaixo para liberar seu acesso:", view=view_2)

    print("Bot está pronto e funcionando!")


# Rodar o bot com o token dos secrets
bot.run(os.getenv('DISCORD_TOKEN'))
